import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'icecreamParlor' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER m
     *  2. INTEGER_ARRAY arr
     */

    public static List<Integer> icecreamParlor(int m, List<Integer> arr) {
     int n = arr.size();
    // dp[i][j] will be true if j can be formed using exactly i numbers from arr
    boolean[][] dp = new boolean[4][m + 1];
    // Initialize the dp array. 0 sum can be formed with 0 numbers.
    dp[0][0] = true;

    // Calculate the dp values
    for (int index = 0; index < n; ++index) {
        for (int count = 2; count >= 0; --count) {
            for (int sum = 0; sum <= m - arr.get(index); ++sum) {
                if (dp[count][sum]) {
                    dp[count + 1][sum + arr.get(index)] = true;
                }
            }
        }
    }

    // Count the number of ways we can get the sum m using 3 numbers
    int count = 0;
    for (int sum = 0; sum <= m; ++sum) {
        if (dp[3][sum]) {
            count++;
        }
    }

    List<Integer> result = new ArrayList<>();
    result.add(count);
    return result;
    
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int m = Integer.parseInt(bufferedReader.readLine().trim());

                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                List<Integer> result = Result.icecreamParlor(m, arr);

                bufferedWriter.write(
                    result.stream()
                        .map(Object::toString)
                        .collect(joining(" "))
                    + "\n"
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
