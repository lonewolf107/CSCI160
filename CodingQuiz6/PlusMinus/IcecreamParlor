import java.util.*;

public class IceCreamParlor {

    // Global variables to track the best combination and its difference from the target value
    private static int[] bestCombination;
    private static int bestDiff = Integer.MAX_VALUE;

    /**
     * Selects combinations of 3 flavors that sum up closest to m without exceeding it.
     *
     * @param costs Array of ice cream flavors' costs
     * @param m     Target amount of money
     * @return      List of combinations (3 flavors each) that fit the requirement
     */
    public static List<int[]> selectFlavors(int[] costs, int m) {
        List<int[]> results = new ArrayList<>();
        combine(costs, m, 0, 0, new int[3]);

        // If a suitable combination is found, add it to the results
        if (bestDiff != Integer.MAX_VALUE) {
            results.add(bestCombination);
        }
        
        return results;
    }

    /**
     * Recursively combines flavors to find the best combination.
     *
     * @param costs             Array of ice cream flavors' costs
     * @param m                 Target amount of money
     * @param start             Starting index for combination
     * @param depth             Current depth of combination (0 to 2)
     * @param currentCombination Current combination of flavors
     */
    private static void combine(int[] costs, int m, int start, int depth, int[] currentCombination) {
        if (depth == 3) {
            // Calculate the total cost of the current combination
            int total = costs[currentCombination[0]] + costs[currentCombination[1]] + costs[currentCombination[2]];
            
            // Check if the total is within budget and if it's the closest to m
            if (total <= m) {
                int currentDiff = m - total;
                if (currentDiff < bestDiff) {
                    bestDiff = currentDiff;
                    bestCombination = currentCombination.clone();
                }
            }
            return;
        }

        // Try all possible combinations
        for (int i = start; i < costs.length; i++) {
            currentCombination[depth] = i;
            combine(costs, m, i + 1, depth + 1, currentCombination);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Number of test cases
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int m = scanner.nextInt(); // Amount of money
            int n = scanner.nextInt(); // Number of flavors
            int[] costs = new int[n];  // Array to store costs

            // Populate the costs array
            for (int j = 0; j < n; j++) {
                costs[j] = scanner.nextInt();
            }

            // Reset bestDiff for each test case
            bestDiff = Integer.MAX_VALUE;

            // Find the best combination and print it
            List<int[]> result = selectFlavors(costs, m);
            for (int[] combination : result) {
                System.out.println((combination[0] + 1) + " " + (combination[1] + 1) + " " + (combination[2] + 1));
            }
        }

        scanner.close();
    }
}
